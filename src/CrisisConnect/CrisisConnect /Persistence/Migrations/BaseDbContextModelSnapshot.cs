// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    partial class BaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CenterResource", b =>
                {
                    b.Property<Guid>("CentersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourcesId")
                        .HasColumnType("uuid");

                    b.HasKey("CentersId", "ResourcesId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("CenterResource");
                });

            modelBuilder.Entity("Domain.Entities.Alert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AlertStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AlertStatus");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AlertType");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("Datelssued")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Datelssued");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid?>("DisasterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Location");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Message");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("Severity")
                        .HasColumnType("integer")
                        .HasColumnName("Severity");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("DisasterId");

                    b.ToTable("Alerts", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Center", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("Capacity");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<int>("CurrentStaff")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentStaff");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UK_Centers_Name")
                        .IsUnique();

                    b.ToTable("Centers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Disaster", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid>("CenterId")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("City");

                    b.Property<int>("ConfirmedCasualties")
                        .HasColumnType("integer")
                        .HasColumnName("ConfirmedCasualties");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOccurred")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateOccurred");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateResolved");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("District");

                    b.Property<string>("EmergencyContactInfo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("EmergencyContactInfo");

                    b.Property<int>("EstimatedAffectedPopulation")
                        .HasColumnType("integer")
                        .HasColumnName("EstimatedAffectedPopulation");

                    b.Property<int>("InjuredCount")
                        .HasColumnType("integer")
                        .HasColumnName("InjuredCount");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastUpdatedAt");

                    b.Property<double?>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision")
                        .HasColumnName("Latitude");

                    b.Property<double?>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision")
                        .HasColumnName("Longitude");

                    b.Property<int>("Magnitude")
                        .HasColumnType("integer")
                        .HasColumnName("Magnitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<int>("Severity")
                        .HasColumnType("integer")
                        .HasColumnName("Severity");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Disasters", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Donor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PhoneNumber");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PhoneNumber" }, "UK_Donors_PhoneNumber")
                        .IsUnique();

                    b.ToTable("Donors", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Logistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentStatus");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Destination");

                    b.Property<DateTime>("EstimatedArrival")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EstimatedArrival");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("ResourceId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "UK_Logistics_Name")
                        .IsUnique();

                    b.ToTable("Logistics", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AlternateContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("AlternateContactPhone");

                    b.Property<string>("CancellationReason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CancellationReason");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("City");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ContactPhone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateAssigned");

                    b.Property<DateTime?>("DateFulfilled")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateFulfilled");

                    b.Property<DateTime?>("DateNeededBy")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateNeededBy");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateRequested");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Description");

                    b.Property<string>("DetailedAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("DetailedAddress");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("District");

                    b.Property<int?>("FulfilledQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("FulfilledQuantity");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("boolean")
                        .HasColumnName("IsUrgent");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("LastUpdatedAt");

                    b.Property<double?>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision")
                        .HasColumnName("Latitude");

                    b.Property<double?>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision")
                        .HasColumnName("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Notes");

                    b.Property<int>("NumberOfPeopleAffected")
                        .HasColumnType("integer")
                        .HasColumnName("NumberOfPeopleAffected");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("Priority");

                    b.Property<string>("RequestorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("RequestorName");

                    b.Property<int>("RequiredQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("RequiredQuantity");

                    b.Property<bool>("RequiresSpecialTransport")
                        .HasColumnType("boolean")
                        .HasColumnName("RequiresSpecialTransport");

                    b.Property<Guid>("ShelterId")
                        .HasColumnType("uuid");

                    b.Property<string>("SpecialRequirements")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("SpecialRequirements");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("VolunteerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VolunteerId");

                    b.ToTable("Requests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("Quantity");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("Type");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Location" }, "UK_Resources_Location")
                        .IsUnique();

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Shelter", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("City");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ClosedAt");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentOccupancy")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentOccupancy");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DisasterId")
                        .HasColumnType("uuid");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("District");

                    b.Property<string>("EmergencyPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("EmergencyPhone");

                    b.Property<bool>("HasAccessibility")
                        .HasColumnType("boolean")
                        .HasColumnName("HasAccessibility");

                    b.Property<bool>("HasKitchen")
                        .HasColumnType("boolean")
                        .HasColumnName("HasKitchen");

                    b.Property<bool>("HasMedicalSupport")
                        .HasColumnType("boolean")
                        .HasColumnName("HasMedicalSupport");

                    b.Property<double?>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision")
                        .HasColumnName("Latitude");

                    b.Property<double?>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision")
                        .HasColumnName("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("OpenedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("OpenedAt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("PhoneNumber");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<int>("TotalCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("TotalCapacity");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DisasterId");

                    b.ToTable("Shelters", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<Guid?>("CenterId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentLocation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CurrentLocation");

                    b.Property<int>("CurrentMemberCount")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentMemberCount");

                    b.Property<string>("CurrentMission")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("CurrentMission");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpectedEndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpectedEndTime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<double?>("Latitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision")
                        .HasColumnName("Latitude");

                    b.Property<double?>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("double precision")
                        .HasColumnName("Longitude");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("MaxCapacity");

                    b.Property<DateTime?>("MissionStartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("MissionStartTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<int>("Specialty")
                        .HasColumnType("integer")
                        .HasColumnName("Specialty");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VolunteerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("Teams", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Volunteer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<bool>("Availability")
                        .HasColumnType("boolean")
                        .HasColumnName("Availability");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Location");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PhoneNumber");

                    b.Property<List<string>>("Skills")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("Skills");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("TeamId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PhoneNumber" }, "UK_Teams_PhoneNumber")
                        .IsUnique();

                    b.ToTable("Volunteers", (string)null);
                });

            modelBuilder.Entity("DonorResource", b =>
                {
                    b.Property<Guid>("DonorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourcesId")
                        .HasColumnType("uuid");

                    b.HasKey("DonorsId", "ResourcesId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("DonorResource");
                });

            modelBuilder.Entity("RequestResource", b =>
                {
                    b.Property<Guid>("RequestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourcesId")
                        .HasColumnType("uuid");

                    b.HasKey("RequestsId", "ResourcesId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("RequestResource");
                });

            modelBuilder.Entity("RequestTeam", b =>
                {
                    b.Property<Guid>("RequestsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamsId")
                        .HasColumnType("uuid");

                    b.HasKey("RequestsId", "TeamsId");

                    b.HasIndex("TeamsId");

                    b.ToTable("RequestTeam");
                });

            modelBuilder.Entity("ResourceShelter", b =>
                {
                    b.Property<Guid>("ResourcesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SheltersId")
                        .HasColumnType("uuid");

                    b.HasKey("ResourcesId", "SheltersId");

                    b.HasIndex("SheltersId");

                    b.ToTable("ResourceShelter");
                });

            modelBuilder.Entity("CenterResource", b =>
                {
                    b.HasOne("Domain.Entities.Center", null)
                        .WithMany()
                        .HasForeignKey("CentersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Alert", b =>
                {
                    b.HasOne("Domain.Entities.Disaster", "Disaster")
                        .WithMany("Alerts")
                        .HasForeignKey("DisasterId");

                    b.Navigation("Disaster");
                });

            modelBuilder.Entity("Domain.Entities.Disaster", b =>
                {
                    b.HasOne("Domain.Entities.Center", "Center")
                        .WithOne("Disaster")
                        .HasForeignKey("Domain.Entities.Disaster", "Id");

                    b.Navigation("Center");
                });

            modelBuilder.Entity("Domain.Entities.Request", b =>
                {
                    b.HasOne("Domain.Entities.Shelter", "Shelter")
                        .WithOne("Request")
                        .HasForeignKey("Domain.Entities.Request", "Id");

                    b.HasOne("Domain.Entities.Volunteer", null)
                        .WithMany("Requests")
                        .HasForeignKey("VolunteerId");

                    b.Navigation("Shelter");
                });

            modelBuilder.Entity("Domain.Entities.Shelter", b =>
                {
                    b.HasOne("Domain.Entities.Disaster", "Disaster")
                        .WithMany("Shelters")
                        .HasForeignKey("DisasterId");

                    b.HasOne("Domain.Entities.Volunteer", "Volunteer")
                        .WithOne("Shelter")
                        .HasForeignKey("Domain.Entities.Shelter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disaster");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.HasOne("Domain.Entities.Center", "Center")
                        .WithMany("Teams")
                        .HasForeignKey("CenterId");

                    b.HasOne("Domain.Entities.Volunteer", "Volunteer")
                        .WithOne("Team")
                        .HasForeignKey("Domain.Entities.Team", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Volunteer");
                });

            modelBuilder.Entity("DonorResource", b =>
                {
                    b.HasOne("Domain.Entities.Donor", null)
                        .WithMany()
                        .HasForeignKey("DonorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RequestResource", b =>
                {
                    b.HasOne("Domain.Entities.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RequestTeam", b =>
                {
                    b.HasOne("Domain.Entities.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ResourceShelter", b =>
                {
                    b.HasOne("Domain.Entities.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Shelter", null)
                        .WithMany()
                        .HasForeignKey("SheltersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Center", b =>
                {
                    b.Navigation("Disaster");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Domain.Entities.Disaster", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("Shelters");
                });

            modelBuilder.Entity("Domain.Entities.Shelter", b =>
                {
                    b.Navigation("Request");
                });

            modelBuilder.Entity("Domain.Entities.Volunteer", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Shelter");

                    b.Navigation("Team");
                });
#pragma warning restore 612, 618
        }
    }
}
